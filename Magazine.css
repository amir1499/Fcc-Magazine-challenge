/*Step 26Passed
To start your CSS, normalize the CSS rules by targeting all elements with *, including the ::before and ::after pseudo-selectors. Set the padding property and margin property both to 0.*/
*,::before,::after{
  padding: 0;
  margin: 0;
}

/*Step 27
Create an html selector and give it a font-size property set to 62.5%. This will set the default font size for your web page to 10px (the browser default is 16px).

This will make it easier for you to work with rem units later, as 2rem would be 20px.*/

html{
  font-size: 62.5%;
  box-sizing: border-box;
}

body{
  font-family: 'Baskervville',serif;
  color: linen;
  background-color: rgb(20,30,40);
}

h1{
  font-family: 'Anton',sans-serif;
  
}

h2,h3,h4,h5,h6{
  font-family: 'Raleway',sans-serif;
}

a{
  text-decoration: none;
  color: linen;
}


main{
  display: grid;
  grid-template-columns: minmax(2rem,1fr) minmax(min-content,94rem) minmax(2rem,1fr);
  row-gap: 3rem;
}

/*Step 44
Create an img selector and give it a width property set to 100%, and an object-fit property set to cover.

The object-fit property tells the browser how to position the element within its container. In this case, cover will set the image to fill the container, cropping as needed to avoid changing the aspect ratio.*/

img{
  width: 100%;
  object-fit: cover;
}

/*Step 61
To give the hr a color, you need to adjust the border property. Give the hr selector a border property set to 1px solid rgba(120, 120, 120, 0.6).*/
hr{
  margin: 1.5rem 0;
  border: 1px solid rgba(120,120,120,0.6);
}
/*Step 36
Your magazine will have three primary sections. You already set the overall layout in the main rule, but you can adjust the placement in the child rules.

One option is the grid-column property, which is shorthand for grid-column-start and grid-column-end. The grid-column property tells the grid item which grid line to start and end at.

Create a .heading rule and set the grid-column property to 2 / 3. This will tell the .heading element to start at grid line 2 and end at grid line 3.*/
/*Step 38
For additional control over the layout of your content, you can have a CSS Grid within a CSS Grid.

Set the display property of your .heading selector to grid.*/
/*Step 39
Now you can style the content of the .heading element with CSS Grid.

The CSS repeat() function is used to repeat a value, rather than writing it out manually, and is helpful for grid layouts. For example, setting the grid-template-columns property to repeat(20, 200px) would create 20 columns each 200px wide.*/
.heading{
  grid-column: 2 / 3;
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  row-gap: 1.5rem;
}

/*Step 56
Your .text element is not a CSS Grid, but you can create columns within an element without using Grid by using the column-width property.*/
/*Step 57
Magazines often use justified text in their printed content to structure their layout and control the flow of their content. While this works in printed form, justified text on websites can be an accessibility concern, for example presenting challenges for folks with dyslexia.

To make your project look like a printed magazine, give the .text selector a text-align property set to justify.*/
.text{
  grid-column: 2 / 3;
  font-size: 1.8rem;
  letter-spacing: 0.6px;
  column-width: 25rem;
  text-align: justify;
}

/*Step 41
Remember that the grid-column property determines which columns an element starts and ends at. There may be times where you are unsure of how many columns your grid will have, but you want an element to stop at the last column. To do this, you can use -1 for the end column.

Create a .hero selector and give it a grid-column property set to 1 / -1. This will tell the element to span the full width of the grid.*/
.hero{
  grid-column: 1 / -1;
  position: relative;
}

.hero-title{
  text-align: center;
  color: orangered;
  font-size: 8rem;
}

.hero-subtitle{
  font-size: 2.4rem;
  color: orangered;
  text-align: center;
}

.author{
  font-size: 2rem;
  font-family: "Raleway",sans-serif;
}

.author-name a:hover{
  background-color: #306203;
}

.publish-date{
  color: rgba(255,255,255,0.5);
}


/*Step 51
The default settings for CSS Grid will create additional rows as needed, unlike Flexbox. Give the .social-icons selector a grid-template-columns property set to repeat(5, 1fr) to arrange the icons in a single row.*/
/*Step 52
If you wanted to add more social icons, but keep them on the same row, you would need to update grid-template-columns to create additional columns. As an alternative, you can use the grid-auto-flow property.

This property takes either row or column as the first value, with an optional second value of dense. grid-auto-flow uses an auto-placement algorithm to adjust the grid layout. Setting it to column will tell the algorithm to create new columns for content as needed. The dense value allows the algorithm to backtrack and fill holes in the grid with smaller items, which can result in items appearing out of order.

For your .social-icons selector, set the grid-auto-flow property to column.*/
/*Step 53
Now the auto-placement algorithm will kick in when you add a new icon element. However, the algorithm defaults the new column width to be auto, which will not match your current columns.

You can override this with the grid-auto-columns property. Give the .social-icons selector a grid-auto-columns property set to 1fr.*/

/*Step 54
Much like Flexbox, with CSS Grid you can align the content of grid items with align-items and justify-items. align-items will align child elements along the column axis, and justify-items will align child elements along the row axis.*/
.social-icons{
  display: grid;
  font-size: 3rem;
  grid-template-columns: repeat(5, 1fr);
  grid-auto-flow: column;
  grid-auto-columns: 1fr;
  align-items: center;
}

/*Step 58
The ::first-letter pseudo-selector allows you to target the first letter in the text content of an element.*/
/*Step 59
The other text has been shifted out of place. Move it into position by giving the .first-paragraph::first-letter selector a float property set to left and a margin-right property set to 1rem.*/
.first-paragraph::first-letter{
  font-size: 6rem;
  color: orangered;
  float: left;
  margin-right: 1rem;
}

.quote{
  color: #00beef;
  font-size: 2.4rem;
  text-align: center;
  font-family: 'Raleway',sans-serif;
}
/*Step 64Passed
A quote is not really a quote without proper quotation marks. You can add these with CSS pseudo selectors.

Create a .quote::before selector and set the content property to " with a space following it.

Also, create a .quote::after selector and set the content property to " with a space preceding it.*/
.quote::before{
  content: " ";
}
.quote::after{
  content: " ";
}

.text-with-images{
  display: grid;
  grid-template-columns:  1fr 2fr;
  column-gap: 3rem;
  margin-bottom: 3rem;
}

/*Step 68
Create a .lists selector and set the list-style-type property to none. This will get rid of the bullet points on the list items.*/
.lists{
  list-style-type: none;
  margin-top: 2rem;
}

.lists li{
  margin-bottom: 1.5rem;
}

.list-title, .list-subtitle{
  color: #00beef;
}

/*Step 73
The images should be within a two column, three row layout.

Give the .image-wrapper selector a grid-template-columns property set to 2fr 1fr and a grid-template-rows property set to repeat(3, min-content). This will give our grid rows that adjust in height based on the content, but columns that remain a fixed width based on the container.*/
/*Step 74
The gap property is a shorthand way to set the value of column-gap and row-gap at the same time. If given one value, it sets the column-gap and row-gap both to that value. If given two values, it sets the row-gap to the first value and the column-gap to the second.

Give the .image-wrapper selector a gap property set to 2rem.*/
/*Step 75
The place-items property can be used to set the align-items and justify-items values at the same time. The place-items property takes one or two values. If one value is provided, it is used for both the align-items and justify-items properties. If two values are provided, the first value is used for the align-items property and the second value is used for the justify-items property.

Give the .image-wrapper selector a place-items property set to center.*/
.image-wrapper{
  display: grid;
  grid-template-columns: 2fr 1fr;
  grid-template-rows: repeat(3, min-content);
  gap: 2rem;
  place-items: center;
}
.image-1, .image-3{
  grid-column: 1 / -1;
}

/*Step 77
Now that the magazine layout is finished, you need to make it responsive.

Start with a @media query for only screen with a max-width of 720px. Inside, create an .image-wrapper selector and give it a grid-template-columns property of 1fr.

This will collapse the three images into one column on smaller screens.*/
@media only screen and (max-width: 720px){
  .image-wrapper{
    grid-template-columns: 1fr;
  }
}

/*Step 78
Create another @media query for only screen with a max-width of 600px. Within, create a .text-with-images rule and give it a grid-template-columns property of 1fr.

This will collapse your bottom text area into a single column on smaller screens.*/
@media only screen and (max-width: 600px){
  .text-with-images{
    grid-template-columns: 1fr;
  }
}

@media only screen and (max-width: 550px){
  .hero-title{
    font-size: 6rem;
  }
  .hero-subtitle, .author, .quote, .list-title{
    font-size: 1.8rem;
  }
  .social-icons{
    font-size: 2rem;
  }
  .text{
    font-size: 1.6rem;
  }
}

@media only screen and (max-width: 420px){
  .hero-title{
    font-size: 4.5rem;
  }
}